import * as React from "react"
import type { HeadFC, PageProps } from "gatsby"

const Title: React.FC<{ title: string; subtitle: string }> = ({ title, subtitle }) => {
  return (
    <div className="pb-1 mb-5 sm:mb-4 sm:leading-tight md:leading-tight lg:leading-tight text-center">
      <h1 className="font-bold text-stone-800">{title}</h1>
      <h2 className="font-bold text-stone-800">{subtitle}</h2>
    </div>
  )
}

const Author: React.FC = ({ children, website, firstAuthor, affiliations, lastAuthor }) => {
  return (
    <span className="text-center inline-block">
      <a
        href={website}
        target="_blank"
        className="font-normal no-underline text-stone-600 hover:underline underline-offset-3 hover:transition-all"
      >
        {children}
      </a>
      {firstAuthor || affiliations ? (
        <sup className="pl-0.5">
          {firstAuthor ? <span className="font-bold">*</span> : null}
          {affiliations ? affiliations : null}
        </sup>
      ) : null}
      {lastAuthor ? null : <>,&nbsp;</>}
    </span>
  )
}

const Affiliation: React.FC = ({ children, website, number }) => {
  return (
    <span className="text-center inline-block mr-4">
      <sup className="mr-0.5">{number}</sup>
      <a
        href={website}
        target="_blank"
        className="font-light no-underline text-stone-600 hover:underline underline-offset-3 hover:transition-all"
      >
        {children}
      </a>
    </span>
  )
}

const Abstract: React.FC = ({ children }) => {
  return (
    <div>
      <div className="flex justify-center content-center">
        <p className="font-semibold text-2xl sm:text-3xl m-1 sm:m-2">Abstract</p>
      </div>
      <div className="flex justify-center content-center">
        <p className="text-justify font-light text-base sm:text-lg m-1 sm:m-1 max-w-[100%] sm:max-w-[620px]">
          {children}
        </p>
      </div>
    </div>
  )
}

const Article: React.FC = ({ children }) => {
  return (
    <div
      className="mx-auto w-full max-w-[90%] format format-md
                         md:format-base
                         lg:max-w-5xl lg:format-lg
                         format-blue dark:format-invert"
    >
      {children}
    </div>
  )
}

const Main: React.FC = ({ children }) => {
  return (
    <main className="pt-6 lg:pt-12 bg-white dark:bg-gray-900">
      {children}
    </main>
  )
}

export const Head: HeadFC = () => (
  <title>Streaming Diffusion Policy: Fast Policy Synthesis with Variable Noise Diffusion Models</title>
)

const IndexPage: React.FC<PageProps> = () => {
  return (
    <>
      <Main>
        <Article>
          <Title
            title="Streaming Diffusion Policy"
            subtitle="Fast Policy Synthesis with Variable Noise Diffusion Models"
          />

          {/* Authors */}
          <div className="flex flex-wrap justify-center text-xl lg:text-xl mb-4">
            <Author website="https://sigmundhh.github.io/" affiliations="1">
              Sigmund H. HÃ¸eg
            </Author>
            <Author website="https://yilundu.github.io/" affiliations="2">
              Yilun Du
            </Author>
            <Author website="https://www.ntnu.edu/employees/olav.egeland" affiliations="1">
              Olav Egeland
            </Author>
          </div>

          {/* Affiliations */}
          <div className="flex flex-wrap justify-center text-xl lg:text-xl mb-1">
            <Affiliation website="https://www.ntnu.edu/" number="1">
              Norwegian University of Science and Technology (NTNU)
            </Affiliation>
            <Affiliation website="https://www.harvard.edu/" number="2">
              Harvard University
            </Affiliation>
          </div>

          {/* Abstract */}
          <Abstract>
            Diffusion models have seen rapid adoption in robotic imitation learning, enabling autonomous execution of complex dexterous tasks. However, action synthesis is often slow, requiring many steps of iterative denoising, limiting the extent to which models can be used in tasks that require fast reactive policies. To sidestep this, recent works have explored how the distillation of the diffusion process can be used to accelerate policy synthesis. However, distillation is computationally expensive and can hurt both the accuracy and diversity of synthesized actions. We propose \model (\modellong), an alternative method to accelerate policy synthesis, leveraging the insight that generating a partially denoised action trajectory <em>with variable levels of noise corruption</em>, where the immediate action to execute is noise-free, with subsequent actions having increasing levels of noise and uncertainty. The partially denoised action trajectory for a new observation can then be quickly generated by applying a few steps of denoising to the previously predicted noisy action trajectory (rolled over by one timestep). We illustrate the efficacy of this approach, dramatically speeding up policy synthesis while preserving performance across both simulated and real-world settings.
          </Abstract>
        </Article>
      </Main>
    </>
  )
}

export default IndexPage
